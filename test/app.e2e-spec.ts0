import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import * as request from 'supertest';
import { AppModule } from '../src/app.module';
import { UserController } from '../src/user/user.controller';
import { UserService } from '../src/user/user.service';
import { User } from '../src/entities/user.entity';
import ormconfig from '../orm.config';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UserRepository } from '../src/repository/user.repository';

// describe('AppController (e2e)', () => {
//   let app: INestApplication;

//   beforeEach(async () => {
//     const moduleFixture: TestingModule = await Test.createTestingModule({
//       imports: [AppModule],
//     }).compile();

//     app = moduleFixture.createNestApplication();
//     await app.init();
//   });

//   it('/ (GET)', () => {
//     // eslint-disable-next-line prettier/prettier
//     return request(app.getHttpServer())
//       .get('/')
//       .expect(200)
//       .expect('Hello World!');
//   });
// });

describe('UserController', () => {
  let app: INestApplication;
  let controller: UserController;
  let userService: UserService;

  beforeEach(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [TypeOrmModule.forRoot(ormconfig), TypeOrmModule.forFeature([User, UserRepository])],
      controllers: [UserController],
      providers: [UserService],
    }).compile();

    controller = moduleFixture.get<UserController>(UserController);
    userService = moduleFixture.get<UserService>(UserService);

    app = moduleFixture.createNestApplication();
    await app.init();
  });

  describe('findAll', () => {
    it('should return an array of users', () => {
      const user = new User();
      user.id = 1;
      user.username = 'test-user';
      user.password = 'test-password';
      const result = [user];
      console.log('findAll result = ', result);
      // const result = [{ id: 1, username: 'test-user', password: 'test-password' }];
      jest.spyOn(controller, 'findAll').mockImplementation(() => Promise.resolve(result));

      return request(app.getHttpServer()).get('/users').expect(200).expect(result);
    });
  });

  // describe('findById', () => {
  //   it('should return a single user', () => {
  //     // const result = { id: 1, name: 'John', age: 30 };
  //     // const user = new User();
  //     // user.id = 1;
  //     // user.username = 'test-user';
  //     // user.password = 'test-password';
  //     // const result = user;
  //     const result = { id: 1, username: 'test-user', password: 'test-password' };
  //     jest.spyOn(userService, 'findById').mockImplementation(() => Promise.resolve(result));

  //     return request(app.getHttpServer()).get('/users/1').expect(200).expect(result);
  //   });
  // });
});
